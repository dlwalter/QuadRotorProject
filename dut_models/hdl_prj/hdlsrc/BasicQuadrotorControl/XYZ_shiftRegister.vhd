-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\BasicQuadrotorControl\XYZ_shiftRegister.vhd
-- Created: 2015-02-18 16:12:25
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: XYZ_shiftRegister
-- Source Path: BasicQuadrotorControl/hdl_dut/ADXL345_read/XYZ_shiftRegister
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY XYZ_shiftRegister IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        CS                                :   IN    std_logic;
        SCLK                              :   IN    std_logic;
        SDO                               :   IN    std_logic;
        READ_SHIFT                        :   IN    std_logic;
        X                                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        Y                                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        Z                                 :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END XYZ_shiftRegister;


ARCHITECTURE rtl OF XYZ_shiftRegister IS

  -- Component Declarations
  COMPONENT rising_edge_detect
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          SCK                             :   IN    std_logic;
          SCK_RISING                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT shiftRegister_48
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          shift                           :   IN    std_logic;
          serial_in                       :   IN    std_logic;
          XYZ                             :   OUT   std_logic_vector(47 DOWNTO 0)  -- ufix48
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rising_edge_detect
    USE ENTITY work.rising_edge_detect(rtl);

  FOR ALL : shiftRegister_48
    USE ENTITY work.shiftRegister_48(rtl);

  -- Signals
  SIGNAL sample_bit                       : std_logic;
  SIGNAL shift_condition1_out1            : std_logic;
  SIGNAL shift_condition_out1             : std_logic;
  SIGNAL XYZ                              : std_logic_vector(47 DOWNTO 0);  -- ufix48
  SIGNAL XYZ_unsigned                     : unsigned(47 DOWNTO 0);  -- ufix48
  SIGNAL Bit_Slice1_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Concat_out1                  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bit_Slice3_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice2_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Concat1_out1                 : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bit_Slice5_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice4_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Concat2_out1                 : unsigned(15 DOWNTO 0);  -- uint16

BEGIN
  -- This section detects the rising edge of the SCK input.
  u_rising_edge_detect : rising_edge_detect
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              SCK => SCLK,
              SCK_RISING => sample_bit
              );

  u_shiftRegister_48 : shiftRegister_48
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              shift => shift_condition_out1,
              serial_in => SDO,
              XYZ => XYZ  -- ufix48
              );

  shift_condition1_out1 <=  NOT CS;

  shift_condition_out1 <= READ_SHIFT AND (sample_bit AND shift_condition1_out1);

  XYZ_unsigned <= unsigned(XYZ);

  Bit_Slice1_out1 <= XYZ_unsigned(39 DOWNTO 32);

  Bit_Slice_out1 <= XYZ_unsigned(47 DOWNTO 40);

  Bit_Concat_out1 <= Bit_Slice1_out1 & Bit_Slice_out1;

  X <= std_logic_vector(Bit_Concat_out1);

  Bit_Slice3_out1 <= XYZ_unsigned(23 DOWNTO 16);

  Bit_Slice2_out1 <= XYZ_unsigned(31 DOWNTO 24);

  Bit_Concat1_out1 <= Bit_Slice3_out1 & Bit_Slice2_out1;

  Y <= std_logic_vector(Bit_Concat1_out1);

  Bit_Slice5_out1 <= XYZ_unsigned(7 DOWNTO 0);

  Bit_Slice4_out1 <= XYZ_unsigned(15 DOWNTO 8);

  Bit_Concat2_out1 <= Bit_Slice5_out1 & Bit_Slice4_out1;

  Z <= std_logic_vector(Bit_Concat2_out1);


END rtl;

