-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\BasicQuadrotorControl\Chart.vhd
-- Created: 2015-02-18 16:12:25
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Chart
-- Source Path: BasicQuadrotorControl/hdl_dut/PWM_Motor1/Chart
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.hdl_dut_pkg.ALL;

ENTITY Chart IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        pwm_enable                        :   IN    std_logic;
        duty                              :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        f_coeff                           :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        PWM                               :   OUT   std_logic
        );
END Chart;


ARCHITECTURE rtl OF Chart IS

  -- Signals
  SIGNAL duty_unsigned                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL f_coeff_unsigned                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL is_Chart                         : T_state_type_is_Chart;  -- uint8
  SIGNAL count                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL PWM_reg                          : std_logic;
  SIGNAL is_Chart_next                    : T_state_type_is_Chart;  -- enum type state_type_is_Chart (4 enums)
  SIGNAL count_next                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL PWM_reg_next                     : std_logic;

BEGIN
  duty_unsigned <= unsigned(duty);

  f_coeff_unsigned <= unsigned(f_coeff);

  Chart_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      is_Chart <= IN_S1;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_Chart <= is_Chart_next;
        count <= count_next;
        PWM_reg <= PWM_reg_next;
      END IF;
    END IF;
  END PROCESS Chart_1_process;
  Chart_1_output : PROCESS (is_Chart, pwm_enable, count, duty_unsigned, f_coeff_unsigned, PWM_reg)
    VARIABLE b : std_logic;
    VARIABLE b_0 : std_logic;
    VARIABLE mul_temp : unsigned(39 DOWNTO 0);
    VARIABLE cast : unsigned(31 DOWNTO 0);
    VARIABLE mul_temp_0 : unsigned(39 DOWNTO 0);
    VARIABLE cast_0 : unsigned(31 DOWNTO 0);
    VARIABLE add_temp : unsigned(16 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(16 DOWNTO 0);
  BEGIN
    is_Chart_next <= is_Chart;
    count_next <= count;
    PWM_reg_next <= PWM_reg;

    CASE is_Chart IS
      WHEN IN_HIGH =>
        mul_temp := to_unsigned(2#11111111#, 8) * f_coeff_unsigned;
        IF mul_temp(39 DOWNTO 32) /= "00000000" THEN 
          cast := X"FFFFFFFF";
        ELSE 
          cast := mul_temp(31 DOWNTO 0);
        END IF;
        IF (resize(count, 32) >= cast) AND (duty_unsigned < to_unsigned(2#11111111#, 8)) THEN 
          b := '1';
        ELSE 
          b := '0';
        END IF;
        IF b = '1' THEN 
          PWM_reg_next <= '0';
          count_next <= to_unsigned(16#0000#, 16);
          is_Chart_next <= IN_LOW;
        ELSIF pwm_enable = '0' THEN 
          PWM_reg_next <= '0';
          is_Chart_next <= IN_S2;
        ELSE 
          add_temp_0 := resize(count, 17) + to_unsigned(2#00000000000000001#, 17);
          IF add_temp_0(16) /= '0' THEN 
            count_next <= X"FFFF";
          ELSE 
            count_next <= add_temp_0(15 DOWNTO 0);
          END IF;
          is_Chart_next <= IN_HIGH;
        END IF;
      WHEN IN_LOW =>
        mul_temp_0 := (to_unsigned(2#11111111#, 8) - duty_unsigned) * f_coeff_unsigned;
        IF mul_temp_0(39 DOWNTO 32) /= "00000000" THEN 
          cast_0 := X"FFFFFFFF";
        ELSE 
          cast_0 := mul_temp_0(31 DOWNTO 0);
        END IF;
        IF (resize(count, 32) >= cast_0) AND (duty_unsigned > to_unsigned(2#00000000#, 8)) THEN 
          b_0 := '1';
        ELSE 
          b_0 := '0';
        END IF;
        IF b_0 = '1' THEN 
          PWM_reg_next <= '1';
          is_Chart_next <= IN_HIGH;
        ELSE 
          add_temp := resize(count, 17) + to_unsigned(2#00000000000000001#, 17);
          IF add_temp(16) /= '0' THEN 
            count_next <= X"FFFF";
          ELSE 
            count_next <= add_temp(15 DOWNTO 0);
          END IF;
          is_Chart_next <= IN_LOW;
        END IF;
      WHEN IN_S1 =>
        IF pwm_enable = '1' THEN 
          count_next <= to_unsigned(16#0000#, 16);
          PWM_reg_next <= '0';
          is_Chart_next <= IN_LOW;
        END IF;
      WHEN OTHERS => 
        is_Chart_next <= IN_S1;
    END CASE;

  END PROCESS Chart_1_output;

  PWM <= PWM_reg_next;

END rtl;

