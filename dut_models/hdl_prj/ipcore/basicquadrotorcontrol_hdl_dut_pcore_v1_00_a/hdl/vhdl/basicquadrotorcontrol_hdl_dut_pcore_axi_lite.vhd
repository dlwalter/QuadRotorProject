-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\BasicQuadrotorControl\basicquadrotorcontrol_hdl_dut_pcore_axi_lite.vhd
-- Created: 2015-02-18 16:31:57
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: basicquadrotorcontrol_hdl_dut_pcore_axi_lite
-- Source Path: basicquadrotorcontrol_hdl_dut_pcore/basicquadrotorcontrol_hdl_dut_pcore_axi_lite
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY basicquadrotorcontrol_hdl_dut_pcore_axi_lite IS
  PORT( reset                             :   IN    std_logic;
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        read_X                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        read_Y                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        read_Z                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        read_XYZ_Valid                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic;  -- ufix1
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_CMD                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        write_CMD_VLD                     :   OUT   std_logic;  -- ufix1
        write_en_motor1                   :   OUT   std_logic;  -- ufix1
        write_duty_motor1                 :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        write_en_motor2                   :   OUT   std_logic;  -- ufix1
        write_duty_motor2                 :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        write_en_motor3                   :   OUT   std_logic;  -- ufix1
        write_duty_motor3                 :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        write_en_motor4                   :   OUT   std_logic;  -- ufix1
        write_duty_motor4                 :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        reset_internal                    :   OUT   std_logic  -- ufix1
        );
END basicquadrotorcontrol_hdl_dut_pcore_axi_lite;


ARCHITECTURE rtl OF basicquadrotorcontrol_hdl_dut_pcore_axi_lite IS

  -- Component Declarations
  COMPONENT basicquadrotorcontrol_hdl_dut_pcore_addr_decoder
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          data_write                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          addr_sel                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_enb                          :   IN    std_logic;  -- ufix1
          rd_enb                          :   IN    std_logic;  -- ufix1
          read_X                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          read_Y                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          read_Z                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          read_XYZ_Valid                  :   IN    std_logic;  -- ufix1
          data_read                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_CMD                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          write_CMD_VLD                   :   OUT   std_logic;  -- ufix1
          write_en_motor1                 :   OUT   std_logic;  -- ufix1
          write_duty_motor1               :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          write_en_motor2                 :   OUT   std_logic;  -- ufix1
          write_duty_motor2               :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          write_en_motor3                 :   OUT   std_logic;  -- ufix1
          write_duty_motor3               :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          write_en_motor4                 :   OUT   std_logic;  -- ufix1
          write_duty_motor4               :   OUT   std_logic_vector(7 DOWNTO 0)  -- ufix8
          );
  END COMPONENT;

  COMPONENT basicquadrotorcontrol_hdl_dut_pcore_axi_lite_module
    PORT( clk                             :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          data_read                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          data_write                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          addr_sel                        :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_enb                          :   OUT   std_logic;  -- ufix1
          rd_enb                          :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : basicquadrotorcontrol_hdl_dut_pcore_addr_decoder
    USE ENTITY work.basicquadrotorcontrol_hdl_dut_pcore_addr_decoder(rtl);

  FOR ALL : basicquadrotorcontrol_hdl_dut_pcore_axi_lite_module
    USE ENTITY work.basicquadrotorcontrol_hdl_dut_pcore_axi_lite_module(rtl);

  -- Signals
  SIGNAL top_data_write                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_addr_sel                     : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL top_wr_enb                       : std_logic;  -- ufix1
  SIGNAL top_rd_enb                       : std_logic;  -- ufix1
  SIGNAL top_data_read                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL inst_axi_enable                  : std_logic;  -- ufix1
  SIGNAL inst_CMD                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL inst_CMD_VLD                     : std_logic;  -- ufix1
  SIGNAL inst_en_motor1                   : std_logic;  -- ufix1
  SIGNAL inst_duty_motor1                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL inst_en_motor2                   : std_logic;  -- ufix1
  SIGNAL inst_duty_motor2                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL inst_en_motor3                   : std_logic;  -- ufix1
  SIGNAL inst_duty_motor3                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL inst_en_motor4                   : std_logic;  -- ufix1
  SIGNAL inst_duty_motor4                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL top_reset_internal               : std_logic;  -- ufix1

BEGIN
  u_basicquadrotorcontrol_hdl_dut_pcore_addr_decoder_inst : basicquadrotorcontrol_hdl_dut_pcore_addr_decoder
    PORT MAP( clk => AXI4_Lite_ACLK,  -- ufix1
              reset => reset,
              data_write => top_data_write,  -- ufix32
              addr_sel => top_addr_sel,  -- ufix14
              wr_enb => top_wr_enb,  -- ufix1
              rd_enb => top_rd_enb,  -- ufix1
              read_X => read_X,  -- ufix16
              read_Y => read_Y,  -- ufix16
              read_Z => read_Z,  -- ufix16
              read_XYZ_Valid => read_XYZ_Valid,  -- ufix1
              data_read => top_data_read,  -- ufix32
              write_axi_enable => inst_axi_enable,  -- ufix1
              write_CMD => inst_CMD,  -- ufix16
              write_CMD_VLD => inst_CMD_VLD,  -- ufix1
              write_en_motor1 => inst_en_motor1,  -- ufix1
              write_duty_motor1 => inst_duty_motor1,  -- ufix8
              write_en_motor2 => inst_en_motor2,  -- ufix1
              write_duty_motor2 => inst_duty_motor2,  -- ufix8
              write_en_motor3 => inst_en_motor3,  -- ufix1
              write_duty_motor3 => inst_duty_motor3,  -- ufix8
              write_en_motor4 => inst_en_motor4,  -- ufix1
              write_duty_motor4 => inst_duty_motor4  -- ufix8
              );

  u_basicquadrotorcontrol_hdl_dut_pcore_axi_lite_module_inst : basicquadrotorcontrol_hdl_dut_pcore_axi_lite_module
    PORT MAP( clk => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              data_read => top_data_read,  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              data_write => top_data_write,  -- ufix32
              addr_sel => top_addr_sel,  -- ufix14
              wr_enb => top_wr_enb,  -- ufix1
              rd_enb => top_rd_enb,  -- ufix1
              reset_internal => top_reset_internal  -- ufix1
              );

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

  write_axi_enable <= inst_axi_enable;

  write_CMD <= inst_CMD;

  write_CMD_VLD <= inst_CMD_VLD;

  write_en_motor1 <= inst_en_motor1;

  write_duty_motor1 <= inst_duty_motor1;

  write_en_motor2 <= inst_en_motor2;

  write_duty_motor2 <= inst_duty_motor2;

  write_en_motor3 <= inst_en_motor3;

  write_duty_motor3 <= inst_duty_motor3;

  write_en_motor4 <= inst_en_motor4;

  write_duty_motor4 <= inst_duty_motor4;

  reset_internal <= top_reset_internal;

END rtl;

