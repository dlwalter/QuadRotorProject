-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\BasicQuadrotorControl\basicquadrotorcontrol_hdl_dut_pcore.vhd
-- Created: 2015-02-18 16:31:57
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: basicquadrotorcontrol_hdl_dut_pcore
-- Source Path: basicquadrotorcontrol_hdl_dut_pcore
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY basicquadrotorcontrol_hdl_dut_pcore IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        PmodJA1_in                        :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        PmodJA1_out                       :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
        PmodJB1                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END basicquadrotorcontrol_hdl_dut_pcore;


ARCHITECTURE rtl OF basicquadrotorcontrol_hdl_dut_pcore IS

  -- Component Declarations
  COMPONENT basicquadrotorcontrol_hdl_dut_pcore_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_X                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          read_Y                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          read_Z                          :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          read_XYZ_Valid                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_CMD                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          write_CMD_VLD                   :   OUT   std_logic;  -- ufix1
          write_en_motor1                 :   OUT   std_logic;  -- ufix1
          write_duty_motor1               :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          write_en_motor2                 :   OUT   std_logic;  -- ufix1
          write_duty_motor2               :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          write_en_motor3                 :   OUT   std_logic;  -- ufix1
          write_duty_motor3               :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          write_en_motor4                 :   OUT   std_logic;  -- ufix1
          write_duty_motor4               :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT basicquadrotorcontrol_hdl_dut_pcore_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          CMD                             :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          CMD_VLD                         :   IN    std_logic;  -- ufix1
          SDO                             :   IN    std_logic;  -- ufix1
          en_motor1                       :   IN    std_logic;  -- ufix1
          duty_motor1                     :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          en_motor2                       :   IN    std_logic;  -- ufix1
          duty_motor2                     :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          en_motor3                       :   IN    std_logic;  -- ufix1
          duty_motor3                     :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          en_motor4                       :   IN    std_logic;  -- ufix1
          duty_motor4                     :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          ce_out                          :   OUT   std_logic;  -- ufix1
          X                               :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          Y                               :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          Z                               :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
          XYZ_Valid                       :   OUT   std_logic;  -- ufix1
          CS                              :   OUT   std_logic;  -- ufix1
          SCLK                            :   OUT   std_logic;  -- ufix1
          SDI                             :   OUT   std_logic;  -- ufix1
          PWM_motor1_1                    :   OUT   std_logic;  -- ufix1
          PWM_motor2_1                    :   OUT   std_logic;  -- ufix1
          PWM_motor3_1                    :   OUT   std_logic;  -- ufix1
          PWM_motor4_1                    :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : basicquadrotorcontrol_hdl_dut_pcore_axi_lite
    USE ENTITY work.basicquadrotorcontrol_hdl_dut_pcore_axi_lite(rtl);

  FOR ALL : basicquadrotorcontrol_hdl_dut_pcore_dut
    USE ENTITY work.basicquadrotorcontrol_hdl_dut_pcore_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL X_sig                            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Y_sig                            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Z_sig                            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL XYZ_Valid_sig                    : std_logic;  -- ufix1
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL CMD_sig                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL CMD_VLD_sig                      : std_logic;  -- ufix1
  SIGNAL en_motor1_sig                    : std_logic;  -- ufix1
  SIGNAL duty_motor1_sig                  : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL en_motor2_sig                    : std_logic;  -- ufix1
  SIGNAL duty_motor2_sig                  : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL en_motor3_sig                    : std_logic;  -- ufix1
  SIGNAL duty_motor3_sig                  : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL en_motor4_sig                    : std_logic;  -- ufix1
  SIGNAL duty_motor4_sig                  : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL CS_sig                           : std_logic;  -- ufix1
  SIGNAL SCLK_sig                         : std_logic;  -- ufix1
  SIGNAL SDI_sig                          : std_logic;  -- ufix1
  SIGNAL PWM_motor1_1_sig                 : std_logic;  -- ufix1
  SIGNAL PWM_motor2_1_sig                 : std_logic;  -- ufix1
  SIGNAL PWM_motor3_1_sig                 : std_logic;  -- ufix1
  SIGNAL PWM_motor4_1_sig                 : std_logic;  -- ufix1
  SIGNAL PmodJA1_out_tmp                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL const_zero                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL PmodJB1_tmp                      : unsigned(7 DOWNTO 0);  -- ufix8

BEGIN
  u_basicquadrotorcontrol_hdl_dut_pcore_axi_lite_inst : basicquadrotorcontrol_hdl_dut_pcore_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_X => X_sig,  -- ufix16
              read_Y => Y_sig,  -- ufix16
              read_Z => Z_sig,  -- ufix16
              read_XYZ_Valid => XYZ_Valid_sig,  -- ufix1
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => dut_enable,  -- ufix1
              write_CMD => CMD_sig,  -- ufix16
              write_CMD_VLD => CMD_VLD_sig,  -- ufix1
              write_en_motor1 => en_motor1_sig,  -- ufix1
              write_duty_motor1 => duty_motor1_sig,  -- ufix8
              write_en_motor2 => en_motor2_sig,  -- ufix1
              write_duty_motor2 => duty_motor2_sig,  -- ufix8
              write_en_motor3 => en_motor3_sig,  -- ufix1
              write_duty_motor3 => duty_motor3_sig,  -- ufix8
              write_en_motor4 => en_motor4_sig,  -- ufix1
              write_duty_motor4 => duty_motor4_sig,  -- ufix8
              reset_internal => reset_internal  -- ufix1
              );

  u_basicquadrotorcontrol_hdl_dut_pcore_dut_inst : basicquadrotorcontrol_hdl_dut_pcore_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => dut_enable,  -- ufix1
              CMD => CMD_sig,  -- ufix16
              CMD_VLD => CMD_VLD_sig,  -- ufix1
              SDO => PmodJA1_in,  -- ufix1
              en_motor1 => en_motor1_sig,  -- ufix1
              duty_motor1 => duty_motor1_sig,  -- ufix8
              en_motor2 => en_motor2_sig,  -- ufix1
              duty_motor2 => duty_motor2_sig,  -- ufix8
              en_motor3 => en_motor3_sig,  -- ufix1
              duty_motor3 => duty_motor3_sig,  -- ufix8
              en_motor4 => en_motor4_sig,  -- ufix1
              duty_motor4 => duty_motor4_sig,  -- ufix8
              ce_out => ce_out_sig,  -- ufix1
              X => X_sig,  -- ufix16
              Y => Y_sig,  -- ufix16
              Z => Z_sig,  -- ufix16
              XYZ_Valid => XYZ_Valid_sig,  -- ufix1
              CS => CS_sig,  -- ufix1
              SCLK => SCLK_sig,  -- ufix1
              SDI => SDI_sig,  -- ufix1
              PWM_motor1_1 => PWM_motor1_1_sig,  -- ufix1
              PWM_motor2_1 => PWM_motor2_1_sig,  -- ufix1
              PWM_motor3_1 => PWM_motor3_1_sig,  -- ufix1
              PWM_motor4_1 => PWM_motor4_1_sig  -- ufix1
              );

  reset_cm <=  NOT IPCORE_RESETN;

  reset <= reset_cm OR reset_internal;

  PmodJA1_out_tmp <= unsigned'(SDI_sig & CS_sig & SCLK_sig);

  PmodJA1_out <= std_logic_vector(PmodJA1_out_tmp);

  const_zero <= to_unsigned(2#0000#, 4);

  PmodJB1_tmp <= const_zero & unsigned'(PWM_motor4_1_sig & PWM_motor3_1_sig & PWM_motor2_1_sig & PWM_motor1_1_sig);

  PmodJB1 <= std_logic_vector(PmodJB1_tmp);

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

