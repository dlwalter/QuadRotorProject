-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\BasicQuadrotorControl\hdl_dut.vhd
-- Created: 2015-02-18 16:12:25
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- X                             ce_out        1
-- Y                             ce_out        1
-- Z                             ce_out        1
-- XYZ_Valid                     ce_out        1
-- CS                            ce_out        1
-- SCLK                          ce_out        1
-- SDI                           ce_out        1
-- PWM_motor1_1                  ce_out        1
-- PWM_motor2_1                  ce_out        1
-- PWM_motor3_1                  ce_out        1
-- PWM_motor4_1                  ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: hdl_dut
-- Source Path: BasicQuadrotorControl/hdl_dut
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY hdl_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        CMD                               :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        CMD_VLD                           :   IN    std_logic;
        SDO                               :   IN    std_logic;
        en_motor1                         :   IN    std_logic;
        duty_motor1                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        en_motor2                         :   IN    std_logic;
        duty_motor2                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        en_motor3                         :   IN    std_logic;
        duty_motor3                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        en_motor4                         :   IN    std_logic;
        duty_motor4                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        X                                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        Y                                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        Z                                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        XYZ_Valid                         :   OUT   std_logic;
        CS                                :   OUT   std_logic;
        SCLK                              :   OUT   std_logic;
        SDI                               :   OUT   std_logic;
        PWM_motor1_1                      :   OUT   std_logic;
        PWM_motor2_1                      :   OUT   std_logic;
        PWM_motor3_1                      :   OUT   std_logic;
        PWM_motor4_1                      :   OUT   std_logic
        );
END hdl_dut;


ARCHITECTURE rtl OF hdl_dut IS

  -- Component Declarations
  COMPONENT ADXL345_read
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In2                             :   IN    std_logic;
          In3                             :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          SDO                             :   IN    std_logic;
          CS                              :   OUT   std_logic;
          Out2                            :   OUT   std_logic;
          Out3                            :   OUT   std_logic;
          Out4                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          Out5                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          Out6                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          Out7                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT PWM_Motor1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          en                              :   IN    std_logic;
          duty                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          freq                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dir                             :   IN    std_logic;
          PWM                             :   OUT   std_logic;
          DIR_1                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT PWM_Motor2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          en                              :   IN    std_logic;
          duty                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          freq                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dir                             :   IN    std_logic;
          PWM                             :   OUT   std_logic;
          DIR_1                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT PWM_Motor3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          en                              :   IN    std_logic;
          duty                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          freq                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dir                             :   IN    std_logic;
          PWM                             :   OUT   std_logic;
          DIR_1                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT PWM_Motor4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          en                              :   IN    std_logic;
          duty                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          freq                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dir                             :   IN    std_logic;
          PWM                             :   OUT   std_logic;
          DIR_1                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ADXL345_read
    USE ENTITY work.ADXL345_read(rtl);

  FOR ALL : PWM_Motor1
    USE ENTITY work.PWM_Motor1(rtl);

  FOR ALL : PWM_Motor2
    USE ENTITY work.PWM_Motor2(rtl);

  FOR ALL : PWM_Motor3
    USE ENTITY work.PWM_Motor3(rtl);

  FOR ALL : PWM_Motor4
    USE ENTITY work.PWM_Motor4(rtl);

  -- Signals
  SIGNAL ADXL345_read_out1                : std_logic;
  SIGNAL ADXL345_read_out2                : std_logic;
  SIGNAL ADXL345_read_out3                : std_logic;
  SIGNAL ADXL345_read_out4                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ADXL345_read_out5                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ADXL345_read_out6                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ADXL345_read_out7                : std_logic;
  SIGNAL pwm_freq_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL constant_out1                    : std_logic;
  SIGNAL PWM                              : std_logic;
  SIGNAL PWM_Motor1_out2                  : std_logic;
  SIGNAL PWM_1                            : std_logic;
  SIGNAL PWM_Motor2_out2                  : std_logic;
  SIGNAL PWM_2                            : std_logic;
  SIGNAL PWM_Motor3_out2                  : std_logic;
  SIGNAL PWM_3                            : std_logic;
  SIGNAL PWM_Motor4_out2                  : std_logic;

BEGIN
  u_ADXL345_read : ADXL345_read
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In2 => CMD_VLD,
              In3 => CMD,  -- uint16
              SDO => SDO,
              CS => ADXL345_read_out1,
              Out2 => ADXL345_read_out2,
              Out3 => ADXL345_read_out3,
              Out4 => ADXL345_read_out4,  -- uint16
              Out5 => ADXL345_read_out5,  -- uint16
              Out6 => ADXL345_read_out6,  -- uint16
              Out7 => ADXL345_read_out7
              );

  u_PWM_Motor1 : PWM_Motor1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              en => en_motor1,
              duty => duty_motor1,  -- uint8
              freq => std_logic_vector(pwm_freq_out1),  -- uint32
              dir => constant_out1,
              PWM => PWM,
              DIR_1 => PWM_Motor1_out2
              );

  u_PWM_Motor2 : PWM_Motor2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              en => en_motor2,
              duty => duty_motor2,  -- uint8
              freq => std_logic_vector(pwm_freq_out1),  -- uint32
              dir => constant_out1,
              PWM => PWM_1,
              DIR_1 => PWM_Motor2_out2
              );

  u_PWM_Motor3 : PWM_Motor3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              en => en_motor3,
              duty => duty_motor3,  -- uint8
              freq => std_logic_vector(pwm_freq_out1),  -- uint32
              dir => constant_out1,
              PWM => PWM_2,
              DIR_1 => PWM_Motor3_out2
              );

  u_PWM_Motor4 : PWM_Motor4
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              en => en_motor4,
              duty => duty_motor4,  -- uint8
              freq => std_logic_vector(pwm_freq_out1),  -- uint32
              dir => constant_out1,
              PWM => PWM_3,
              DIR_1 => PWM_Motor4_out2
              );

  pwm_freq_out1 <= to_unsigned(16#00000190#, 32);

  constant_out1 <= '0';

  ce_out <= clk_enable;





  X <= ADXL345_read_out4;

  Y <= ADXL345_read_out5;

  Z <= ADXL345_read_out6;

  XYZ_Valid <= ADXL345_read_out7;

  CS <= ADXL345_read_out1;

  SCLK <= ADXL345_read_out2;

  SDI <= ADXL345_read_out3;

  PWM_motor1_1 <= PWM;

  PWM_motor2_1 <= PWM_1;

  PWM_motor3_1 <= PWM_2;

  PWM_motor4_1 <= PWM_3;

END rtl;

