-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\L3G4200D_SPI\L3G4200D_SPI_hdl_dut_ipcore_addr_decoder.vhd
-- Created: 2015-04-14 21:31:26
-- 
-- Generated by MATLAB 8.5 and HDL Coder 3.6
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: L3G4200D_SPI_hdl_dut_ipcore_addr_decoder
-- Source Path: L3G4200D_SPI_hdl_dut_ipcore/L3G4200D_SPI_hdl_dut_ipcore_axi_lite/L3G4200D_SPI_hdl_dut_ipcore_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY L3G4200D_SPI_hdl_dut_ipcore_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_x_gyro_low                   :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
        read_x_gyro_out                   :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
        read_y_gyro_low                   :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
        read_y_gyro_out                   :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
        read_z_gyro_low                   :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
        read_z_gyro_out                   :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
        read_who_am_i                     :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_enable                      :   OUT   std_logic  -- ufix1
        );
END L3G4200D_SPI_hdl_dut_ipcore_addr_decoder;


ARCHITECTURE rtl OF L3G4200D_SPI_hdl_dut_ipcore_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_x_gyro_low            : std_logic;  -- ufix1
  SIGNAL read_x_gyro_low_signed           : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL read_x_gyro_out_signed           : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL read_y_gyro_low_signed           : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL read_y_gyro_out_signed           : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL read_z_gyro_low_signed           : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL read_z_gyro_out_signed           : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL read_who_am_i_signed             : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL decode_sel_who_am_i              : std_logic;  -- ufix1
  SIGNAL decode_sel_z_gyro_out            : std_logic;  -- ufix1
  SIGNAL decode_sel_z_gyro_low            : std_logic;  -- ufix1
  SIGNAL decode_sel_y_gyro_out            : std_logic;  -- ufix1
  SIGNAL decode_sel_y_gyro_low            : std_logic;  -- ufix1
  SIGNAL decode_sel_x_gyro_out            : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_x_gyro_low              : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL data_in_x_gyro_low               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_x_gyro_low             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_x_gyro_out              : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL data_in_x_gyro_out               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_x_gyro_out             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_y_gyro_low              : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL data_in_y_gyro_low               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_y_gyro_low             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_y_gyro_out              : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL data_in_y_gyro_out               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_y_gyro_out             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_z_gyro_low              : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL data_in_z_gyro_low               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_z_gyro_low             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_z_gyro_out              : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL data_in_z_gyro_out               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_z_gyro_out             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_who_am_i                : signed(7 DOWNTO 0);  -- sfix8
  SIGNAL data_in_who_am_i                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_who_am_i               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL data_in_enable                   : std_logic;  -- ufix1
  SIGNAL decode_sel_enable                : std_logic;  -- ufix1
  SIGNAL reg_enb_enable                   : std_logic;  -- ufix1
  SIGNAL write_reg_enable                 : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_x_gyro_low <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  read_x_gyro_low_signed <= signed(read_x_gyro_low);

  const_1 <= '1';

  enb <= const_1;

  read_x_gyro_out_signed <= signed(read_x_gyro_out);

  read_y_gyro_low_signed <= signed(read_y_gyro_low);

  read_y_gyro_out_signed <= signed(read_y_gyro_out);

  read_z_gyro_low_signed <= signed(read_z_gyro_low);

  read_z_gyro_out_signed <= signed(read_z_gyro_out);

  read_who_am_i_signed <= signed(read_who_am_i);

  
  decode_sel_who_am_i <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  
  decode_sel_z_gyro_out <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  
  decode_sel_z_gyro_low <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  
  decode_sel_y_gyro_out <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  
  decode_sel_y_gyro_low <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  
  decode_sel_x_gyro_out <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_x_gyro_low_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_x_gyro_low <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_x_gyro_low <= read_x_gyro_low_signed;
      END IF;
    END IF;
  END PROCESS reg_x_gyro_low_process;


  data_in_x_gyro_low <= unsigned(resize(read_reg_x_gyro_low, 32));

  
  decode_rd_x_gyro_low <= const_0 WHEN decode_sel_x_gyro_low = '0' ELSE
      data_in_x_gyro_low;

  reg_x_gyro_out_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_x_gyro_out <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_x_gyro_out <= read_x_gyro_out_signed;
      END IF;
    END IF;
  END PROCESS reg_x_gyro_out_process;


  data_in_x_gyro_out <= unsigned(resize(read_reg_x_gyro_out, 32));

  
  decode_rd_x_gyro_out <= decode_rd_x_gyro_low WHEN decode_sel_x_gyro_out = '0' ELSE
      data_in_x_gyro_out;

  reg_y_gyro_low_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_y_gyro_low <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_y_gyro_low <= read_y_gyro_low_signed;
      END IF;
    END IF;
  END PROCESS reg_y_gyro_low_process;


  data_in_y_gyro_low <= unsigned(resize(read_reg_y_gyro_low, 32));

  
  decode_rd_y_gyro_low <= decode_rd_x_gyro_out WHEN decode_sel_y_gyro_low = '0' ELSE
      data_in_y_gyro_low;

  reg_y_gyro_out_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_y_gyro_out <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_y_gyro_out <= read_y_gyro_out_signed;
      END IF;
    END IF;
  END PROCESS reg_y_gyro_out_process;


  data_in_y_gyro_out <= unsigned(resize(read_reg_y_gyro_out, 32));

  
  decode_rd_y_gyro_out <= decode_rd_y_gyro_low WHEN decode_sel_y_gyro_out = '0' ELSE
      data_in_y_gyro_out;

  reg_z_gyro_low_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_z_gyro_low <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_z_gyro_low <= read_z_gyro_low_signed;
      END IF;
    END IF;
  END PROCESS reg_z_gyro_low_process;


  data_in_z_gyro_low <= unsigned(resize(read_reg_z_gyro_low, 32));

  
  decode_rd_z_gyro_low <= decode_rd_y_gyro_out WHEN decode_sel_z_gyro_low = '0' ELSE
      data_in_z_gyro_low;

  reg_z_gyro_out_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_z_gyro_out <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_z_gyro_out <= read_z_gyro_out_signed;
      END IF;
    END IF;
  END PROCESS reg_z_gyro_out_process;


  data_in_z_gyro_out <= unsigned(resize(read_reg_z_gyro_out, 32));

  
  decode_rd_z_gyro_out <= decode_rd_z_gyro_low WHEN decode_sel_z_gyro_out = '0' ELSE
      data_in_z_gyro_out;

  reg_who_am_i_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_who_am_i <= to_signed(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_who_am_i <= read_who_am_i_signed;
      END IF;
    END IF;
  END PROCESS reg_who_am_i_process;


  data_in_who_am_i <= unsigned(resize(read_reg_who_am_i, 32));

  
  decode_rd_who_am_i <= decode_rd_z_gyro_out WHEN decode_sel_who_am_i = '0' ELSE
      data_in_who_am_i;

  data_read <= std_logic_vector(decode_rd_who_am_i);

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  data_in_enable <= data_write_unsigned(0);

  
  decode_sel_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_enb_enable <= decode_sel_enable AND wr_enb;

  reg_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_enable <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_enable = '1' THEN
        write_reg_enable <= data_in_enable;
      END IF;
    END IF;
  END PROCESS reg_enable_process;


  write_enable <= write_reg_enable;

END rtl;

