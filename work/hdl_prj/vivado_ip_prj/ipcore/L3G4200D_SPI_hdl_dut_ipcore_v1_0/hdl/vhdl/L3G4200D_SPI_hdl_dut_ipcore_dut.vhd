-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\L3G4200D_SPI\L3G4200D_SPI_hdl_dut_ipcore_dut.vhd
-- Created: 2015-04-14 21:31:26
-- 
-- Generated by MATLAB 8.5 and HDL Coder 3.6
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: L3G4200D_SPI_hdl_dut_ipcore_dut
-- Source Path: L3G4200D_SPI_hdl_dut_ipcore/L3G4200D_SPI_hdl_dut_ipcore_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY L3G4200D_SPI_hdl_dut_ipcore_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        enable                            :   IN    std_logic;  -- ufix1
        SDO                               :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        x_gyro_low                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
        x_gyro_out                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
        y_gyro_low                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
        y_gyro_out                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
        z_gyro_low                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
        z_gyro_out                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
        who_am_i                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
        SCLK                              :   OUT   std_logic;  -- ufix1
        CS                                :   OUT   std_logic;  -- ufix1
        SDI                               :   OUT   std_logic  -- ufix1
        );
END L3G4200D_SPI_hdl_dut_ipcore_dut;


ARCHITECTURE rtl OF L3G4200D_SPI_hdl_dut_ipcore_dut IS

  -- Component Declarations
  COMPONENT hdl_dut
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          enable                          :   IN    std_logic;  -- ufix1
          SDO                             :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          x_gyro_low                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          x_gyro_out                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          y_gyro_low                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          y_gyro_out                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          z_gyro_low                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          z_gyro_out                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          who_am_i                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          SCLK                            :   OUT   std_logic;  -- ufix1
          CS                              :   OUT   std_logic;  -- ufix1
          SDI                             :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : hdl_dut
    USE ENTITY work.hdl_dut(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enable_sig                       : std_logic;  -- ufix1
  SIGNAL SDO_sig                          : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL x_gyro_low_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL x_gyro_out_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL y_gyro_low_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL y_gyro_out_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL z_gyro_low_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL z_gyro_out_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL who_am_i_sig                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL SCLK_sig                         : std_logic;  -- ufix1
  SIGNAL CS_sig                           : std_logic;  -- ufix1
  SIGNAL SDI_sig                          : std_logic;  -- ufix1

BEGIN
  u_hdl_dut : hdl_dut
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              enable => enable_sig,  -- ufix1
              SDO => SDO_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              x_gyro_low => x_gyro_low_sig,  -- sfix8
              x_gyro_out => x_gyro_out_sig,  -- sfix8
              y_gyro_low => y_gyro_low_sig,  -- sfix8
              y_gyro_out => y_gyro_out_sig,  -- sfix8
              z_gyro_low => z_gyro_low_sig,  -- sfix8
              z_gyro_out => z_gyro_out_sig,  -- sfix8
              who_am_i => who_am_i_sig,  -- sfix8
              SCLK => SCLK_sig,  -- ufix1
              CS => CS_sig,  -- ufix1
              SDI => SDI_sig  -- ufix1
              );

  enable_sig <= enable;

  SDO_sig <= SDO;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  x_gyro_low <= x_gyro_low_sig;

  x_gyro_out <= x_gyro_out_sig;

  y_gyro_low <= y_gyro_low_sig;

  y_gyro_out <= y_gyro_out_sig;

  z_gyro_low <= z_gyro_low_sig;

  z_gyro_out <= z_gyro_out_sig;

  who_am_i <= who_am_i_sig;

  SCLK <= SCLK_sig;

  CS <= CS_sig;

  SDI <= SDI_sig;

END rtl;

