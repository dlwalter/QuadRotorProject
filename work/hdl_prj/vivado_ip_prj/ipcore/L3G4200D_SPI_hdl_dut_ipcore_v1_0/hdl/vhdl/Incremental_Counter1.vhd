-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\L3G4200D_SPI\Incremental_Counter1.vhd
-- Created: 2015-04-14 21:31:24
-- 
-- Generated by MATLAB 8.5 and HDL Coder 3.6
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Incremental_Counter1
-- Source Path: L3G4200D_SPI/hdl_dut/Incremental Counter1
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Incremental_Counter1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Inc                               :   IN    std_logic;
        Out_rsvd                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END Incremental_Counter1;


ARCHITECTURE rtl OF Incremental_Counter1 IS

  -- Component Declarations
  COMPONENT Detect_Increase1_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Wrap_To_Zero_block
    PORT( U                               :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          Y                               :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Detect_Increase1_block1
    USE ENTITY work.Detect_Increase1_block1(rtl);

  FOR ALL : Wrap_To_Zero_block
    USE ENTITY work.Wrap_To_Zero_block(rtl);

  -- Signals
  SIGNAL Detect_Increase1_out1            : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Output2_out1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Increment_Real_World2_out1       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Wrap_To_Zero_out1                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Wrap_To_Zero_out1_unsigned       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Increment_Real_World1_out1       : unsigned(15 DOWNTO 0);  -- uint16

BEGIN
  u_Detect_Increase1 : Detect_Increase1_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => Inc,
              Y => Detect_Increase1_out1
              );

  u_Wrap_To_Zero : Wrap_To_Zero_block
    PORT MAP( U => std_logic_vector(Switch_out1),  -- uint16
              Y => Wrap_To_Zero_out1  -- uint16
              );

  
  switch_compare_1 <= '1' WHEN Detect_Increase1_out1 > '0' ELSE
      '0';

  Increment_Real_World2_out1 <= Output2_out1 + to_unsigned(16#0001#, 16);

  
  Switch_out1 <= Output2_out1 WHEN switch_compare_1 = '0' ELSE
      Increment_Real_World2_out1;

  Wrap_To_Zero_out1_unsigned <= unsigned(Wrap_To_Zero_out1);

  Output2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Output2_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Output2_out1 <= Wrap_To_Zero_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Output2_process;


  Increment_Real_World1_out1 <= Output2_out1 + to_unsigned(16#0001#, 16);

  Out_rsvd <= std_logic_vector(Increment_Real_World1_out1);

END rtl;

