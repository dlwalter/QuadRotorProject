-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\L3G4200D_SPI\Transmit.vhd
-- Created: 2015-04-14 21:31:24
-- 
-- Generated by MATLAB 8.5 and HDL Coder 3.6
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Transmit
-- Source Path: L3G4200D_SPI/hdl_dut/Transmit
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.hdl_dut_pkg.ALL;

ENTITY Transmit IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        transmit_begin                    :   IN    std_logic;
        data                              :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        rw_bit                            :   IN    std_logic;
        MISO                              :   IN    std_logic;
        read_data                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        data_valid                        :   OUT   std_logic;
        CLK_1                             :   OUT   std_logic;
        CS                                :   OUT   std_logic;
        MOSI                              :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END Transmit;


ARCHITECTURE rtl OF Transmit IS

  -- Constants
  CONSTANT message_length                 : unsigned(15 DOWNTO 0) := to_unsigned(16#0010#, 16);  -- ufix16

  -- Signals
  SIGNAL data_unsigned                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL is_Transmit                      : T_state_type_is_Transmit;  -- uint8
  SIGNAL is_WRITE                         : T_state_type_is_WRITE;  -- uint8
  SIGNAL is_READ                          : T_state_type_is_READ;  -- uint8
  SIGNAL count                            : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL bit_count                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL transmit_flag                    : std_logic;
  SIGNAL read_temp                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL read_data_tmp                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL read_data_reg                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_valid_reg                   : std_logic;
  SIGNAL CLK_reg                          : std_logic;
  SIGNAL CS_reg                           : std_logic;
  SIGNAL MOSI_reg                         : std_logic;
  SIGNAL ready_reg                        : std_logic;
  SIGNAL is_Transmit_next                 : T_state_type_is_Transmit;  -- enum type state_type_is_Transmit (7 enums)
  SIGNAL is_WRITE_next                    : T_state_type_is_WRITE;  -- enum type state_type_is_WRITE (5 enums)
  SIGNAL is_READ_next                     : T_state_type_is_READ;  -- enum type state_type_is_READ (8 enums)
  SIGNAL count_next                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL bit_count_next                   : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL transmit_flag_next               : std_logic;
  SIGNAL read_temp_next                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL read_data_reg_next               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_valid_reg_next              : std_logic;
  SIGNAL CLK_reg_next                     : std_logic;
  SIGNAL CS_reg_next                      : std_logic;
  SIGNAL MOSI_reg_next                    : std_logic;
  SIGNAL ready_reg_next                   : std_logic;

BEGIN
  data_unsigned <= unsigned(data);

  Transmit_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      is_READ <= IN_NO_ACTIVE_CHILD;
      is_WRITE <= IN_NO_ACTIVE_CHILD;
      count <= to_unsigned(16#0000#, 16);
      bit_count <= to_unsigned(16#0000#, 16);
      transmit_flag <= '0';
      read_temp <= to_unsigned(16#0000#, 16);
      read_data_reg <= to_unsigned(16#00#, 8);
      data_valid_reg <= '0';
      CLK_reg <= '1';
      CS_reg <= '1';
      MOSI_reg <= '0';
      ready_reg <= '1';
      is_Transmit <= IN_IDLE;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        is_Transmit <= is_Transmit_next;
        is_WRITE <= is_WRITE_next;
        is_READ <= is_READ_next;
        count <= count_next;
        bit_count <= bit_count_next;
        transmit_flag <= transmit_flag_next;
        read_temp <= read_temp_next;
        read_data_reg <= read_data_reg_next;
        data_valid_reg <= data_valid_reg_next;
        CLK_reg <= CLK_reg_next;
        CS_reg <= CS_reg_next;
        MOSI_reg <= MOSI_reg_next;
        ready_reg <= ready_reg_next;
      END IF;
    END IF;
  END PROCESS Transmit_1_process;

  Transmit_1_output : PROCESS (is_Transmit, is_WRITE, is_READ, count, bit_count, transmit_flag, read_temp,
       transmit_begin, data_unsigned, rw_bit, MISO, read_data_reg,
       data_valid_reg, CLK_reg, CS_reg, MOSI_reg, ready_reg)
    VARIABLE cnt : unsigned(4 DOWNTO 0);
    VARIABLE ser_data_int : std_logic;
    VARIABLE ser_data_int_0 : std_logic;
    VARIABLE cnt_0 : unsigned(4 DOWNTO 0);
    VARIABLE ser_data_int_1 : std_logic;
    VARIABLE read_bit : unsigned(15 DOWNTO 0);
    VARIABLE guard1 : std_logic;
    VARIABLE count_temp : unsigned(15 DOWNTO 0);
    VARIABLE cast : std_logic;
    VARIABLE cast_0 : unsigned(16 DOWNTO 0);
  BEGIN
    count_temp := count;
    read_temp_next <= read_temp;
    read_data_reg_next <= read_data_reg;
    data_valid_reg_next <= data_valid_reg;
    CLK_reg_next <= CLK_reg;
    CS_reg_next <= CS_reg;
    MOSI_reg_next <= MOSI_reg;
    ready_reg_next <= ready_reg;
    is_Transmit_next <= is_Transmit;
    is_WRITE_next <= is_WRITE;
    is_READ_next <= is_READ;
    bit_count_next <= bit_count;
    transmit_flag_next <= transmit_flag;
    guard1 := '0';
    CASE is_Transmit IS
      WHEN IN_BEGIN =>
        CS_reg_next <= '0';
        is_Transmit_next <= IN_CHIPSELECT;
      WHEN IN_CHIPSELECT =>
        IF count = to_unsigned(16#0000#, 16) THEN 
          count_temp := to_unsigned(16#0000#, 16);
          IF rw_bit = '1' THEN 
            is_Transmit_next <= IN_READ;
            is_READ_next <= IN_CLOCK_BEGIN1;
          ELSIF ( NOT rw_bit) = '1' THEN 
            is_Transmit_next <= IN_WRITE;
            is_WRITE_next <= IN_CLOCK_BEGIN;
          ELSE 
            guard1 := '1';
          END IF;
        ELSE 
          guard1 := '1';
        END IF;
      WHEN IN_END_TRANS =>
        IF count = to_unsigned(16#0000#, 16) THEN 
          count_temp := to_unsigned(16#0000#, 16);
          CS_reg_next <= '1';
          is_Transmit_next <= IN_STALL;
        ELSE 
          count_temp := count + to_unsigned(16#0001#, 16);
          is_Transmit_next <= IN_END_TRANS;
        END IF;
      WHEN IN_IDLE =>
        IF transmit_begin = '1' THEN 
          ready_reg_next <= '0';
          transmit_flag_next <= '1';
          count_temp := to_unsigned(16#0000#, 16);
          CS_reg_next <= '1';
          CLK_reg_next <= '1';
          is_Transmit_next <= IN_BEGIN;
        END IF;
      WHEN IN_READ =>
        IF ( NOT transmit_flag) = '1' THEN 
          data_valid_reg_next <= '0';
          is_READ_next <= IN_NO_ACTIVE_CHILD;
          is_Transmit_next <= IN_END_TRANS;
        ELSE 
          CASE is_READ IS
            WHEN IN_CLK_END1 =>
              NULL;
            WHEN IN_CLOCK_BEGIN1 =>
              CLK_reg_next <= '0';
              bit_count_next <= to_unsigned(16#0000#, 16);
              IF data_unsigned(15) /= '0' THEN 
                ser_data_int_0 := '1';
              ELSE 
                ser_data_int_0 := '0';
              END IF;
              MOSI_reg_next <= ser_data_int_0;
              is_READ_next <= IN_CLOCK_LOW1;
            WHEN IN_CLOCK_HIGH1 =>
              IF count = to_unsigned(16#000D#, 16) THEN 
                CLK_reg_next <= '0';
                count_temp := to_unsigned(16#0000#, 16);
                cnt_0 := resize(resize(bit_count, 17) + to_unsigned(16#00001#, 17), 5);
                IF cnt_0 = to_unsigned(16#01#, 5) THEN 
                  IF data_unsigned(15) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#02#, 5) THEN 
                  IF data_unsigned(14) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#03#, 5) THEN 
                  IF data_unsigned(13) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#04#, 5) THEN 
                  IF data_unsigned(12) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#05#, 5) THEN 
                  IF data_unsigned(11) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#06#, 5) THEN 
                  IF data_unsigned(10) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#07#, 5) THEN 
                  IF data_unsigned(9) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#08#, 5) THEN 
                  IF data_unsigned(8) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#09#, 5) THEN 
                  IF data_unsigned(7) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#0A#, 5) THEN 
                  IF data_unsigned(6) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#0B#, 5) THEN 
                  IF data_unsigned(5) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#0C#, 5) THEN 
                  IF data_unsigned(4) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#0D#, 5) THEN 
                  IF data_unsigned(3) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#0E#, 5) THEN 
                  IF data_unsigned(2) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#0F#, 5) THEN 
                  IF data_unsigned(1) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSIF cnt_0 = to_unsigned(16#10#, 5) THEN 
                  IF data_unsigned(0) /= '0' THEN 
                    ser_data_int_1 := '1';
                  ELSE 
                    ser_data_int_1 := '0';
                  END IF;
                ELSE 
                  ser_data_int_1 := '1';
                END IF;
                MOSI_reg_next <= ser_data_int_1;
                is_READ_next <= IN_CLOCK_LOW1;
              ELSE 
                count_temp := count + to_unsigned(16#0001#, 16);
                is_READ_next <= IN_CLOCK_HIGH1;
              END IF;
            WHEN IN_CLOCK_HIGH3 =>
              IF count = to_unsigned(16#000D#, 16) THEN 
                CLK_reg_next <= '0';
                count_temp := to_unsigned(16#0000#, 16);
                is_READ_next <= IN_CLOCK_LOW3;
              ELSIF bit_count = message_length THEN 
                count_temp := to_unsigned(16#0000#, 16);
                MOSI_reg_next <= '0';
                data_valid_reg_next <= '1';
                is_READ_next <= IN_DATA_VALID1;
              ELSE 
                count_temp := count + to_unsigned(16#0001#, 16);
                is_READ_next <= IN_CLOCK_HIGH3;
              END IF;
            WHEN IN_CLOCK_LOW1 =>
              IF count = to_unsigned(16#000D#, 16) THEN 
                CLK_reg_next <= '1';
                count_temp := to_unsigned(16#0000#, 16);
                bit_count_next <= bit_count + to_unsigned(16#0001#, 16);
                is_READ_next <= IN_CLOCK_HIGH1;
              ELSIF bit_count = to_unsigned(16#0008#, 16) THEN 
                count_temp := to_unsigned(16#0000#, 16);
                MOSI_reg_next <= '0';
                CLK_reg_next <= '0';
                read_temp_next <= to_unsigned(16#0000#, 16);
                is_READ_next <= IN_CLOCK_LOW3;
              ELSE 
                count_temp := count + to_unsigned(16#0001#, 16);
                is_READ_next <= IN_CLOCK_LOW1;
              END IF;
            WHEN IN_CLOCK_LOW3 =>
              IF count = to_unsigned(16#000D#, 16) THEN 
                CLK_reg_next <= '1';
                count_temp := to_unsigned(16#0000#, 16);
                bit_count_next <= bit_count + to_unsigned(16#0001#, 16);
                read_bit := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & MISO;
                cast := read_bit(0);
                cast_0 := '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & cast;
                read_temp_next <= resize(resize(read_temp sll 1, 17) OR cast_0, 16);
                is_READ_next <= IN_CLOCK_HIGH3;
              ELSE 
                count_temp := count + to_unsigned(16#0001#, 16);
                is_READ_next <= IN_CLOCK_LOW3;
              END IF;
            WHEN OTHERS => 
              read_data_reg_next <= read_temp(7 DOWNTO 0);
              transmit_flag_next <= '0';
              is_READ_next <= IN_CLK_END1;
          END CASE;
        END IF;
      WHEN IN_STALL =>
        IF count = to_unsigned(16#0064#, 16) THEN 
          ready_reg_next <= '1';
          is_Transmit_next <= IN_IDLE;
        ELSE 
          count_temp := count + to_unsigned(16#0001#, 16);
          is_Transmit_next <= IN_STALL;
        END IF;
      WHEN OTHERS => 
        IF ( NOT transmit_flag) = '1' THEN 
          data_valid_reg_next <= '0';
          is_WRITE_next <= IN_NO_ACTIVE_CHILD;
          is_Transmit_next <= IN_END_TRANS;
        ELSE 
          CASE is_WRITE IS
            WHEN IN_CLOCK_BEGIN =>
              CLK_reg_next <= '0';
              bit_count_next <= to_unsigned(16#0000#, 16);
              IF data_unsigned(15) /= '0' THEN 
                MOSI_reg_next <= '1';
              ELSE 
                MOSI_reg_next <= '0';
              END IF;
              is_WRITE_next <= IN_CLOCK_LOW;
            WHEN IN_CLOCK_END =>
              NULL;
            WHEN IN_CLOCK_HIGH =>
              IF count = to_unsigned(16#000D#, 16) THEN 
                CLK_reg_next <= '0';
                count_temp := to_unsigned(16#0000#, 16);
                cnt := resize(resize(bit_count, 17) + to_unsigned(16#00001#, 17), 5);
                IF cnt = to_unsigned(16#01#, 5) THEN 
                  IF data_unsigned(15) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#02#, 5) THEN 
                  IF data_unsigned(14) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#03#, 5) THEN 
                  IF data_unsigned(13) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#04#, 5) THEN 
                  IF data_unsigned(12) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#05#, 5) THEN 
                  IF data_unsigned(11) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#06#, 5) THEN 
                  IF data_unsigned(10) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#07#, 5) THEN 
                  IF data_unsigned(9) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#08#, 5) THEN 
                  IF data_unsigned(8) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#09#, 5) THEN 
                  IF data_unsigned(7) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#0A#, 5) THEN 
                  IF data_unsigned(6) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#0B#, 5) THEN 
                  IF data_unsigned(5) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#0C#, 5) THEN 
                  IF data_unsigned(4) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#0D#, 5) THEN 
                  IF data_unsigned(3) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#0E#, 5) THEN 
                  IF data_unsigned(2) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#0F#, 5) THEN 
                  IF data_unsigned(1) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSIF cnt = to_unsigned(16#10#, 5) THEN 
                  IF data_unsigned(0) /= '0' THEN 
                    ser_data_int := '1';
                  ELSE 
                    ser_data_int := '0';
                  END IF;
                ELSE 
                  ser_data_int := '1';
                END IF;
                MOSI_reg_next <= ser_data_int;
                is_WRITE_next <= IN_CLOCK_LOW;
              ELSIF bit_count = message_length THEN 
                count_temp := to_unsigned(16#0000#, 16);
                transmit_flag_next <= '0';
                MOSI_reg_next <= '0';
                data_valid_reg_next <= '1';
                is_WRITE_next <= IN_CLOCK_END;
              ELSE 
                count_temp := count + to_unsigned(16#0001#, 16);
                is_WRITE_next <= IN_CLOCK_HIGH;
              END IF;
            WHEN OTHERS => 
              IF count = to_unsigned(16#000D#, 16) THEN 
                CLK_reg_next <= '1';
                count_temp := to_unsigned(16#0000#, 16);
                bit_count_next <= bit_count + to_unsigned(16#0001#, 16);
                is_WRITE_next <= IN_CLOCK_HIGH;
              ELSE 
                count_temp := count + to_unsigned(16#0001#, 16);
                is_WRITE_next <= IN_CLOCK_LOW;
              END IF;
          END CASE;
        END IF;
    END CASE;
    IF guard1 = '1' THEN 
      count_temp := count_temp + to_unsigned(16#0001#, 16);
      is_Transmit_next <= IN_CHIPSELECT;
    END IF;
    count_next <= count_temp;
  END PROCESS Transmit_1_output;

  read_data_tmp <= read_data_reg_next;
  data_valid <= data_valid_reg_next;
  CLK_1 <= CLK_reg_next;
  CS <= CS_reg_next;
  MOSI <= MOSI_reg_next;
  ready <= ready_reg_next;

  read_data <= std_logic_vector(read_data_tmp);

END rtl;

