-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\L3G4200D_SPI\L3G4200D_SPI_hdl_dut_ipcore.vhd
-- Created: 2015-04-14 21:31:26
-- 
-- Generated by MATLAB 8.5 and HDL Coder 3.6
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: L3G4200D_SPI_hdl_dut_ipcore
-- Source Path: L3G4200D_SPI_hdl_dut_ipcore
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY L3G4200D_SPI_hdl_dut_ipcore IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        SDO                               :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        SCLK                              :   OUT   std_logic;  -- ufix1
        CS                                :   OUT   std_logic;  -- ufix1
        SDI                               :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END L3G4200D_SPI_hdl_dut_ipcore;


ARCHITECTURE rtl OF L3G4200D_SPI_hdl_dut_ipcore IS

  -- Component Declarations
  COMPONENT L3G4200D_SPI_hdl_dut_ipcore_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_x_gyro_low                 :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
          read_x_gyro_out                 :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
          read_y_gyro_low                 :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
          read_y_gyro_out                 :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
          read_z_gyro_low                 :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
          read_z_gyro_out                 :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
          read_who_am_i                   :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_enable                    :   OUT   std_logic;  -- ufix1
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT L3G4200D_SPI_hdl_dut_ipcore_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          enable                          :   IN    std_logic;  -- ufix1
          SDO                             :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          x_gyro_low                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          x_gyro_out                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          y_gyro_low                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          y_gyro_out                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          z_gyro_low                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          z_gyro_out                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          who_am_i                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- sfix8
          SCLK                            :   OUT   std_logic;  -- ufix1
          CS                              :   OUT   std_logic;  -- ufix1
          SDI                             :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : L3G4200D_SPI_hdl_dut_ipcore_axi_lite
    USE ENTITY work.L3G4200D_SPI_hdl_dut_ipcore_axi_lite(rtl);

  FOR ALL : L3G4200D_SPI_hdl_dut_ipcore_dut
    USE ENTITY work.L3G4200D_SPI_hdl_dut_ipcore_dut(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL x_gyro_low_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL x_gyro_out_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL y_gyro_low_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL y_gyro_out_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL z_gyro_low_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL z_gyro_out_sig                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL who_am_i_sig                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_enable                     : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL SCLK_sig                         : std_logic;  -- ufix1
  SIGNAL CS_sig                           : std_logic;  -- ufix1
  SIGNAL SDI_sig                          : std_logic;  -- ufix1

BEGIN
  u_L3G4200D_SPI_hdl_dut_ipcore_axi_lite_inst : L3G4200D_SPI_hdl_dut_ipcore_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_x_gyro_low => x_gyro_low_sig,  -- sfix8
              read_x_gyro_out => x_gyro_out_sig,  -- sfix8
              read_y_gyro_low => y_gyro_low_sig,  -- sfix8
              read_y_gyro_out => y_gyro_out_sig,  -- sfix8
              read_z_gyro_low => z_gyro_low_sig,  -- sfix8
              read_z_gyro_out => z_gyro_out_sig,  -- sfix8
              read_who_am_i => who_am_i_sig,  -- sfix8
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_enable => write_enable,  -- ufix1
              reset_internal => reset_internal  -- ufix1
              );

  u_L3G4200D_SPI_hdl_dut_ipcore_dut_inst : L3G4200D_SPI_hdl_dut_ipcore_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              enable => write_enable,  -- ufix1
              SDO => SDO,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              x_gyro_low => x_gyro_low_sig,  -- sfix8
              x_gyro_out => x_gyro_out_sig,  -- sfix8
              y_gyro_low => y_gyro_low_sig,  -- sfix8
              y_gyro_out => y_gyro_out_sig,  -- sfix8
              z_gyro_low => z_gyro_low_sig,  -- sfix8
              z_gyro_out => z_gyro_out_sig,  -- sfix8
              who_am_i => who_am_i_sig,  -- sfix8
              SCLK => SCLK_sig,  -- ufix1
              CS => CS_sig,  -- ufix1
              SDI => SDI_sig  -- ufix1
              );

  reset_cm <=  NOT IPCORE_RESETN;

  reset <= reset_cm OR reset_internal;

  SCLK <= SCLK_sig;

  CS <= CS_sig;

  SDI <= SDI_sig;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

